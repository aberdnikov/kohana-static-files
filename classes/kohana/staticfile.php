<?php defined('SYSPATH') or die('No direct access allowed.');

/**
 * @package Kohana-static-files
 * @author Berdnikov Alexey <aberdnikov@gmail.com>
 */
class Kohana_StaticFile {

	/**
	 * @var Kohana_Config
	 */
	protected $_config;

	public function __construct()
	{
		$this->_config = Kohana::config('staticfiles');
	}

	/**
	 * Blocking schema file saving
	 *
	 * @see http://forum.dklab.ru/viewtopic.php?p=96622#96622
	 * @param  string $file
	 * @param  string $data
	 * @return void
	 */
	function save($file, $data)
	{
		// Creating empty file if it is not exists
		// If exists - this operation will make no harm to it
		fclose(fopen($file, "a+b"));

		// File blocking
		if(! ($f = fopen($file, "r+b")))
		{
			throw new Kohana_Exception(__('Can\'t open cache file!'));
		}

		// Waiting a monopole owning
		flock($f, LOCK_EX);

		// Writing file
		fwrite($f, $data);

		fclose($f);
	}

	/**
	 * Gets file content
	 *
	 * @param  string $url
	 * @return string
	 */
	function getSource($url)
	{
		// External server file
		if (mb_substr($url, 0, 4) == 'http')
		{
			if (function_exists('curl_init'))
			{
				$curl       = curl_init($url);
				$user_agent = 'Kohana: module "static-files"';
				curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($curl, CURLOPT_HEADER, false);
				curl_setopt($curl, CURLOPT_USERAGENT, $user_agent);
				curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
				$raw_data   = curl_exec($curl);
				curl_close($curl);

				$responce = $raw_data;
			}
			else
			{
				$responce = file_get_contents($url);
			}

			return $responce;
		}
		else
		{
			// Virtual file (generated by some module)
			// ie 'module-name/style.css'
			if (mb_strpos($url, $this->_config->url) === 0)
			{
				$orig = Controller_Staticfiles::static_original(str_replace($this->_config->url, '', $url));
			}
			else
			{
				// Real existing file
				// ie '/css/style.css'
				$orig = realpath(DOCROOT) . preg_replace('/\//', DIRECTORY_SEPARATOR, $url);
			}
			return file_get_contents($orig);
		}
	}

	/**
	 * Returns cache file path
	 *
	 * @param  string $file_name
	 * @return string
	 */
	public function cache_file($file_name)
	{
		$cache_file = $this->_config->path . substr($this->_config->cache, 1) . $file_name;

		if ( ! file_exists(dirname($cache_file)))
		{
			mkdir(dirname($cache_file), 0755, TRUE);
		}

		return $cache_file;
	}

	/**
	 * Returns cache file url
	 *
	 * @param  string $file_name
	 * @return string
	 */
	public function cache_url($file_name)
	{
		return $this->_config->cache . $file_name;
	}

	/**
	 * Generates unique file name for a build file
	 *
	 * @param  array       $file_array
	 * @param  string|null $condition_prefix
	 * @param  string      $type (css|js)
	 * @return string
	 */
	protected function makeFileName(array $file_array, $condition_prefix = NULL, $type)
	{
		$condition_prefix = strtolower(preg_replace('/[^A-Za-z0-9_\-]/', '-', $condition_prefix));
		$condition_prefix = $condition_prefix ? ($condition_prefix . '/') : '';
		$file_name        = md5($this->_config->host . serialize($file_array));

		return $type . '/'
			 . $condition_prefix
			 . substr($file_name, 0, 1) . '/'
			 . substr($file_name, 1, 1) . '/'
			 . $file_name . '.' . $type;
	}

	/**
	 * Clearing cache folders
	 *
	 * @return void
	 */
	protected function _cache_reset()
	{
		$cache_paths = array($this->_config->cache, $this->_config->url);

		foreach($cache_paths as $path)
		{
			$path = DOCROOT . trim(preg_replace('/\//', DIRECTORY_SEPARATOR, $path), '\\');
			File::rmdir($path, TRUE);
		}
	}

} // END Kohana_StaticFile